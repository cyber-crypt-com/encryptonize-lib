// Copyright (C) 2022 CYBERCRYPT
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package crypto

import (
	"testing"

	"bytes"
	"encoding/hex"
)

// Test vectors from
// https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/KMAC_samples.pdf
var kmackdfTests = []struct {
	kik, context, label, key string
}{
	{
		"404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F",
		"00010203",
		"My Tagged Application",
		"20C570C31346F703C9AC36C61C03CB64C3970D0CFC787E9B79599D273A68D2F7F69D4CC3DE9D104A351689F27CF6F5951F0103F33F4F24871024D9C27773A8DD",
	},
	{
		"404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F",
		"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7",
		"",
		"75358CF39E41494E949707927CEE0AF20A3FF553904C86B08F21CC414BCFD691589D27CF5E15369CBBFF8B9A4C2EB17800855D0235FF635DA82533EC6B759B69",
	},
	{
		"404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F",
		"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7",
		"My Tagged Application",
		"B58618F71F92E1D56C1B8C55DDD7CD188B97B4CA4D99831EB2699A837DA2E4D970FBACFDE50033AEA585F1A2708510C32D07880801BD182898FE476876FC8965",
	},
}

func TestKMACKDF(t *testing.T) {
	for i, test := range kmackdfTests {
		kik, err := hex.DecodeString(test.kik)
		if err != nil {
			t.Errorf("error decoding KAT: %s", err)
		}
		key, err := hex.DecodeString(test.key)
		if err != nil {
			t.Errorf("error decoding KAT: %s", err)
		}
		context, err := hex.DecodeString(test.context)
		if err != nil {
			t.Errorf("error decoding KAT: %s", err)
		}

		computedKey := KMACKDF(len(key), kik, []byte(test.label), context)
		if !bytes.Equal(key, computedKey) {
			t.Errorf("#%d: got %x, want %x", i, computedKey, key)
		}
	}
}
